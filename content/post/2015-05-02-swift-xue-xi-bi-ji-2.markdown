---
layout: post
title: "Swift 学习笔记（二）"
date: 2015-05-02 19:23:20 +0800

tags: [Swift, 学习笔记]
---

今天学习一些基本运算符想关的知识。运算符是检查、改变、合并值的特殊符号或短语。

另一个很重要的地方是将以前变成容易因为运算法导致的问题解决了一哈。增加了区间运算符，还加入了 OC 中没有的运算符重载

<!--more-->


## 基本运算符

运算符有一元、二元、三元运算符，其中元表示操作对象的数目。

### 赋值运算符
跟其他语言一样，使用 `=` 来赋值。

赋值右边为元组时，元素被分解：

    let (x, y) = (1, 2)
    // x = 1, y = 2

与 C 语言和 Objective-C 不同，Swift 中的赋值操作不返回任何值，这样子就避免了在 if 语句中经常发生的错误：

    if (x = y) {
        // 编译器报错
    }

### 算术运算法
支持基本四则算术运算：加减乘除。Swift 默认情况下不支持数值运算中的溢出，可参照 `溢出运算符`

加法用于 `String` 类型拼接：

    var helloWorld = "hello" + " " + "world" + "!"
    // helloWorld = "hello world!"

#### 取余运算符
这个没有很大的变化，对负数取余时，会忽略其负号，即 `a % b` 和 `a % -b` 结果相同

不同于 C 语言，Swift 是可以对浮点数进行求余运算的（实际中有什么用处呢？），其计算原理仍然是先得到最大的倍数，然后得到余数作为结果，不过这个余数是 Double 类型的。

#### 自增自减运算符
自增（++）自减（--）操作都是操作数本身加 1 或者减 1 ，不过在 Swift 中对浮点数也可操作。

如果只是对操作数本身做增加减少操作，前置后置都行

如果需要需要使用返回值，那么需要注意

- ++ 前置，先自增后返回
- ++ 后置，先返回后自增

一般如果不使用后置的特性，推荐使用前置写法 `++ a` 更加明确表达意图

#### 一元负号运算符



### 组合赋值运算（Compound Assignment Operators）
### 比较运算符
### 三目运算符
### 空合运算符
### 区间运算符
### 逻辑运算符



## 控制流

### Loop

### switch

